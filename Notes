creating Website with Anvil

Anvil is a website that allows us to create a E commerce website using pyhton code more easily.

Anvil allows us to use a drag and drop editor that allows us to create out custom HTML

HTML: is code that is used to structure a web page.

Anvil has a propertys tab that allows us to change the name of stuff, its role, its layout, icon, and a lot more.

class Form1(Form1Template):

  def __init__(self, **properties):

    # Set Form properties and Data Bindings.

    self.init_components(**properties)



    # Any code you write here will run before the form opens.
    
this is the front end code that allows us to change stuff in the propertys stuff, as mentioned above.

to change propertys in anvil we can for example, go to coding tab, and then do self.variable_name.text = 'our new name'
which then changes the name of the thing we wanna alter.

back end of code: code that allows the website to be running

front end code: what the user will see.

data tab: allows us to store users, or just in general data that we will have

Adming page of website will rendrer all other pages in the website

link 3 and link 2 on the top right screen because we want it to show if user is sighne in or not, and a option to view whats in his cart



BASE PAGE

- this page will render other pages inside of it.

- content_panel is where the main content of our webisite will be
















HOME PAGE

-Wil be rendered in base page

-With anvil we can customize the way we want out home page to look. For example, for my home page I have the title, a button that will take us to view clothes, as well as the brand logo.

-With Anvil we can also change the name of our text boxes, or images in order to keep more organized.

# Rendering home page within base page
# Is done within base file

self.content_panel.add_component(Home())

# adding home file into our main content panel.

# For this line of code to work we also need to add in: from ..Home import Home. So we can actually use the home component.



 
 
 
 
VIEW CLOTHES PAGE 

- Approach: add data about our clothes (creating the clothes that will be sold), and then making it so our base page will render each course from this file and present it, within the base page.

- To make button work we can look at its propertys and customize what we want the button to do, based on the method anvil automatically creates for us.
 
 # Method that anvil gives us:
 
 def view_click(self, **event_args):
    """This method is called when the button is clicked"""
    pass

# can customize what we want to happen when the button is clicked.

- when the button is clicked a method will be called that clears the content panel of our home page, and then adds in our clothes.

- To do this we need to create a new content_panel (add our components from our home page in there), and then clear the content_panel and render the Clothes file within it. 

# CODE
 
 def view_click(self, **event_args):
    """This method is called when the button is clicked"""
    self.content_panel.clear()
    self.content_panel.add_component(Clothes())
    
    # also need 'from ..Clothes import Clothes' so that the method can actually add the clothes file.
    
  
  GOING BACK TO HOME PAGE BUTTON
  
  - very similar to thing above. Essentially what we need to do is go got the propertys of the 'WAJED CLOTHING' button at the top right corner, and alter the method that is ran when its clicked.
  
  - in this method we will simply just clear the content_panel, and the render the home page yet again within it.
  
  # Code
  
   def title_click(self, **event_args):
    """This method is called when the link is clicked"""
    self.content_panel.clear()
    self.content_panel.add_component(Home())
    
   - Home is already imported therefore we wont need to do it again.
   
   
    PARANTHESIS OF THE ..HOME IMPORT HOME
    
   - every file or form has a class. Ex: class Base(). this class represent the page we are seeing. 
   
   - If we want to treat a page as a component, we need to make in instance of that class. Which is why we have .. Home (Instance of home).
   
   
   
   CART
   
   - same as the above thing just with the propertys of the 'Cart' button
   
   
   
    SIGN IN/SIGN OUT
    
    - super simple with anvil
    
    
    
    
   
   
  
  
  






















