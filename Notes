creating Website with Anvil

Anvil is a website that allows us to create a E commerce website using pyhton code more easily.

Anvil allows us to use a drag and drop editor that allows us to create out custom HTML

HTML: is code that is used to structure a web page.

Anvil has a propertys tab that allows us to change the name of stuff, its role, its layout, icon, and a lot more.

class Form1(Form1Template):

  def __init__(self, **properties):

    # Set Form properties and Data Bindings.

    self.init_components(**properties)



    # Any code you write here will run before the form opens.
    
this is the front end code that allows us to change stuff in the propertys stuff, as mentioned above.

to change propertys in anvil we can for example, go to coding tab, and then do self.variable_name.text = 'our new name'
which then changes the name of the thing we wanna alter.

back end of code: code that allows the website to be running

front end code: what the user will see.

data tab: allows us to store users, or just in general data that we will have

Adming page of website will rendrer all other pages in the website

link 3 and link 2 on the top right screen because we want it to show if user is sighne in or not, and a option to view whats in his cart



BASE PAGE

- this page will render other pages inside of it.

- content_panel is where the main content of our webisite will be
















HOME PAGE

-Wil be rendered in base page

-With anvil we can customize the way we want out home page to look. For example, for my home page I have the title, a button that will take us to view clothes, as well as the brand logo.

-With Anvil we can also change the name of our text boxes, or images in order to keep more organized.

# Rendering home page within base page
# Is done within base file

self.content_panel.add_component(Home())

# adding home file into our main content panel.

# For this line of code to work we also need to add in: from ..Home import Home. So we can actually use the home component.



 
 
 
 
VIEW CLOTHES PAGE 

- Approach: add data about our clothes (creating the clothes that will be sold), and then making it so our base page will render each course from this file and present it, within the base page.

- To make button work we can look at its propertys and customize what we want the button to do, based on the method anvil automatically creates for us.
 
 # Method that anvil gives us:
 
 def view_click(self, **event_args):
    """This method is called when the button is clicked"""
    pass

# can customize what we want to happen when the button is clicked.

- when the button is clicked a method will be called that clears the content panel of our home page, and then adds in our clothes.

- To do this we need to create a new content_panel (add our components from our home page in there), and then clear the content_panel and render the Clothes file within it. 

# CODE
 
 def view_click(self, **event_args):
    """This method is called when the button is clicked"""
    self.content_panel.clear()
    self.content_panel.add_component(Clothes())
    
    # also need 'from ..Clothes import Clothes' so that the method can actually add the clothes file.
    
  
  GOING BACK TO HOME PAGE BUTTON
  
  - very similar to thing above. Essentially what we need to do is go got the propertys of the 'WAJED CLOTHING' button at the top right corner, and alter the method that is ran when its clicked.
  
  - in this method we will simply just clear the content_panel, and the render the home page yet again within it.
  
  # Code
  
   def title_click(self, **event_args):
    """This method is called when the link is clicked"""
    self.content_panel.clear()
    self.content_panel.add_component(Home())
    
   - Home is already imported therefore we wont need to do it again.
   
   
    PARANTHESIS OF THE ..HOME IMPORT HOME
    
   - every file or form has a class. Ex: class Base(). this class represent the page we are seeing. 
   
   - If we want to treat a page as a component, we need to make in instance of that class. Which is why we have .. Home (Instance of home).
   
   
   
   CART
   
   - same as the above thing just with the propertys of the 'Cart' button
   
   
   
    SIGN IN/SIGN OUT
    
    - super simple with anvil
    
    - Will be adding users application, that will allows users to sign in with many different things. Allow us to customize which type of passwords are allowed, as well as customize registration.
    
    # allows users to login
    # will be added into the propertys of the sign in button on the base page
   
   anvil.users.login_with_form()
    
    # calling this function will give us access to everything in the user table.
   
    anvil.users.get_user()
    
   
   
   
   
   
   
   MAKING SIGN IN BUTTON GO AWAY
    
    -change of text of the sign in button based on if were signed in or not.
    
    -creating a new method to do this
    
    -this method will also allow us to log out.
    
    # our method
    def change_sign_in(self):
   
   # will give us the information on the users table, which we can then use to determine if we need to change the text or not, or wether the user can log out or not.
      user = anvil.users.get_user()
      
      
      # if the user is sighned in then, we run these lines of code.
     if user:
         
         
        # in anvil we can acces the stuff from our data tables by using a dictionary key, like "user["email"]".
        email = user["email"]
        
        
        # changing the text of the button
        self.sign_in.text = email
    
    
    
    
    
    # if not signed in then the text does not change.
    else:
        self.sign_in.text = "sign In"
        
      
    - For this method to work we need to call it, withtin the class.
    
    - this method should also be called after clicking the sign in button.
    
    
    
     LOGGING OUT
     
     - built in function called confirm that opens up dialouge that asks user if they would like to logout.
     
     - also created a new function that clears the content_panel and adds in the home page (will be very usefull)
     
     def sign_in_click(self, **event_args):
    """This method is called when the link is clicked"""
    user = anvil.users.get_user()
    if user:
      logout = confirm('Would you like to logout?')
      if logout:
        anvil.users.logout()
        self.go_to_home()
        
    else:
      anvil.users.login_with_form()
    self.change_sign_in()
    
    # what this line of code is essentially doing is it gets the users information, and if the user is logged in, a built in function called confirm is called that will ask the user if they would like to logout or not.
    
    # if yes, the user will be logged out, and the method, that clears the content_panel, and adds in home is called. as well as the sign in button will come back. 
    
    # If the user is not logged in, then it will just be asked to sign up.
    
    
    CART BUTTON ONLY SHOWING UP IF WE ARE SIGNED IN
     
     
     - creating a new method that checks if user is signed in or not. If they are not, the cart button will not show up.
     
     - This method is called in the sign in method, as that method will check if the user is signed in or not, therefore calling our 'change_cart' method there makes the most sense, as we could use the information to determine if the cart button will be shown or not.
     
     # code
     
     def change_sign_in(self):
    user = anvil.users.get_user()
    if user:
      self.sign_in.text = user["email"]
    else:
      self.sign_in.text = "sign In"
    self.change_cart_sign()
  
  def change_cart_sign(self):
    self.cart.visible = anvil.users.get_user() != None
    
    
    DATA BASE OF THE PRODUCTS
    
    - will hold all the information related to the products i am selling.
    -will adding feilds in the user table. The feild we will be adding is 'Clothes bought"
    - want to have a data base the stores the clothes. Any information related the brought being sold will be added in their (image, description, type, etc).
    -
    
    
    
    BACK END CODE
    
    -how we wil be accesing our data tables.
    - doing this in server, as we would not want the users to be able to modify my website.
    - going to set up routes that will be called when needed. Will be needed when we need to the information of the clothes, the price of the specifc clothing item, and the information of one product.  
    
    #
    
    - @anvil.server.callable allows our routes to be called with anvil.server.call()
    
    - client_readable(), what this does is it allows u to return a readable view to the front end of your webstite. It also does not allow for users to change the thing returned.
    
    -client_writeable allows clilents to modify things. Example: changing their name.
    
    - loading our courses into the clothes file from the data base.
    
    # code
    
    def insert_clothes(self):
    clothes = anvil.server.call("get_clothes_details").search()
    
    - .search() allows us to view the information.
    
    - parameter is in string format.
    
    - self.insert_clothes(), will be added into the clothes class, as we want that method to run the second the clothes page is ran.
    
    
     CREATING LAYOUT FOR COURSES
     
     -create a new file that we will use as a custom property, where we will be adding in the information to our layout for each individaul product.
     
     -self.content_panel.add_component(ClothingItem(name = "Shorts", ) this line of code is essentailly importing the course item ( in this case were imprting the shorts.)
     
    
    SETTING THE DIFFERENT ELEMENTS TO OUR LAYOUT
    
    - to fo this we need to go into out code if ourlayout and intilize our propertys. Example: 
    
    # code
    
     def __init__(self, name, price, description,  **properties):
    # Set Form properties and Data Bindings.
    self.init_components(**properties)
    self.name.text = name
    self.description.text = description
    self.price.text = price
    
    
    - after initializing these propertys we can then add the propwertys withtin the Clothing item template, and what it will do is intilize the propertys into my layout. this will be done for the both the pants and the shorts.
    
    
    
    
    # ran into issue with loading the text into layout, as I was not filling in all the paramteres in my intilization class.
     
     
    # syntax error. bad input is giving me a hard time.
    
    
    ran into a long trouble with naming and learning how to connect my data table and propertys to my website.
    
    # heres what I learned
    
    in iorder to do this we need ot create a data table holding the information of the products we will be selling. We then need to make another file that will have custom propertys filled in based on the data table of our producrs. (essentailly creating the layout for which we want our propertys to go on and look).
    
    # for i in clothes:
      c = ClothingItem(name = i["name"], button_text = i["price"], description = i["description"], image = i["image"], button_callback = None)
      self.content_panel.add_component(c)
      
      # iterating through our clothe table and assighning each property to the layout, using i.
      
      
      
      
     MAKING THEM ONE SINGLE ROW
     
     - gonna create a grid panel where we will be adding the clothe into, and then rendring the panel in the main conten_panel.
      
      
    - GridPanel() is a built in grid with 12 coloums, 
    
    CREATING CHECKOUT PAGE
    
    - will be passing through the propertys, like with the products.
    
    
    - two coloumn panels ( one with the information of the piece of clothing u are buying), and the other having the price and rating .
    
    - clocking a piece of clothing will bring us to to checkout.
    
    
    INTEGRATING STRIPE/BUY BUTTON
    
    - is what allows for the actualy payments to be made.
    
    - in our data, we will be storing the name of the clothes we boought (check if
    
    
    
    
    
    
    
    
    
    
   
   
  
  
  






















